{"version":3,"file":"static/js/742.3a3eac78.chunk.js","mappings":"yMAGaA,EAAMC,EAAAA,GAAAA,IAAH,qCACZC,EAAAA,GACAC,EAAAA,G,sICHSC,EAAOH,EAAAA,EAAAA,GAAH,oJAMR,SAAAI,GAAC,OAAIA,EAAEC,MAAMJ,MAAM,EAAlB,IAGGK,EAAWN,EAAAA,EAAAA,GAAH,uTAIQ,SAAAI,GAAC,OAAIA,EAAEC,MAAMJ,MAAM,EAAlB,IAEC,SAAAG,GAAC,OAAIA,EAAEC,MAAMJ,MAAM,EAAlB,IAGD,SAAAG,GAAC,OAAIA,EAAEC,MAAMJ,MAAM,EAAlB,IAInBM,EAAUP,EAAAA,EAAAA,IAAH,mE,SClBPQ,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEzB,OACE,+BAEI,SAACN,EAAD,UACGM,EAAKC,MAAM,EAAG,GAAGC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACpB,UAACT,EAAD,YACE,SAACC,EAAD,CACES,IAAKH,EAXA,kCAW8BA,EAZ7B,6DAaNI,IAAKH,KAEP,uBAAIA,KACJ,uCAAeC,OANFH,EADK,OAc/B,E,UCLD,EAfc,WACZ,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KAIA,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUL,GAASM,MAAK,SAAAC,GAAI,OAAIJ,EAAQI,EAAKhB,KAAjB,GAC7B,GAAE,CAACS,KAEF,+BACA,SAACnB,EAAA,EAAD,CAAK2B,GAAG,MAAMC,GAAG,IAAjB,UACG,SAACnB,EAAD,CAAWC,KAAMA,OAIvB,C,2MChBKmB,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAGlB,IAAMC,EAAmB,mCAAG,oGACZD,IAAAA,IAAA,oCAAuCD,IAD3B,cACzBH,EADyB,yBAExBA,EAAKM,MAFmB,2CAAH,qDAKjBC,EAAkB,mCAAG,WAAMC,GAAN,uFACbJ,IAAAA,IAAA,gCACQD,EADR,kBACyBK,IAFZ,cAC1BR,EAD0B,yBAIzBA,EAAKM,MAJoB,2CAAH,sDAOlBG,EAAc,mCAAG,WAAMhB,GAAN,uFACRW,IAAAA,IAAA,iBAAoBX,EAApB,oBAAuCU,IAD/B,cACtBO,EADsB,yBAErBA,GAFqB,2CAAH,sDAMdZ,EAAS,mCAAG,WAAML,GAAN,uFACJW,IAAAA,IAAA,iBAAoBX,EAApB,4BAA+CU,IAD3C,cACjBnB,EADiB,yBAEhBA,EAAKsB,MAFW,2CAAH,sDAITK,EAAY,mCAAG,WAAMlB,GAAN,uFACJW,IAAAA,IAAA,iBACVX,EADU,4BACiBU,IAFb,cACpBS,EADoB,yBAInBA,GAJmB,2CAAH,qD","sources":["components/Box.jsx","components/Cast/CastList.stuled.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\nimport { space, layout } from 'styled-system';\n\nexport const Box = styled.div`\n  ${space}\n  ${layout}\n`;","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  gap: ${p => p.theme.space[5]}px;\n`;\n\nexport const ListItem = styled.li`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  flex-basis: calc((100% - ${p => p.theme.space[6]}px) / 4);\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - ${p => p.theme.space[5]}px) / 5);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - ${p => p.theme.space[4]}px * 2) / 6);\n  }\n`;\n\nexport const CastImg = styled.img`\n  min-width: 200px;\n  min-height: 200px;\n`;","import PropTypes from 'prop-types';\nimport { CastImg, List, ListItem } from './CastList.stuled';\n\nconst defaultPoster = 'https://www.proficinema.ru/assets/images/cnt/poster_no.png';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const CastList = ({ cast }) => {\n  \n  return (\n    <>\n      {\n        <List>\n          {cast.slice(0, 4).map(({ id, profile_path, name, character }) => (\n            <ListItem key={id}>\n              <CastImg\n                src={profile_path ? BASE_IMG_URL + profile_path : defaultPoster}\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </ListItem>\n          ))}\n        </List>\n      }\n    </>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/fetchMovies';\nimport { CastList } from './CastList';\nimport { Box } from 'components/Box';\n\n const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    fetchCast(movieId).then(resp => setCast(resp.cast));\n  }, [movieId]);\n  return (\n    <>\n    <Box as=\"div\" pt=\"4\">\n       <CastList  cast={cast}/>\n    </Box>\n    </>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\n\nconst API_KEY = 'bfe20768c956c05046c7d088e4b361cd';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n\nexport const fetchTrendingMovies = async () => {\n    const resp = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n    return resp.data;\n  };\n\n  export const fetchMoviesByQuery = async query => {\n    const resp = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return resp.data;\n  };\n\n  export const fetchMovieById = async movieId => {\n    const movie = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    return movie;\n  };\n\n\n  export const fetchCast = async movieId => {\n    const cast = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n    return cast.data;\n  };\n  export const fetchReviews = async movieId => {\n    const reviews = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return reviews;\n  };"],"names":["Box","styled","space","layout","List","p","theme","ListItem","CastImg","CastList","cast","slice","map","id","profile_path","name","character","src","alt","movieId","useParams","useState","setCast","useEffect","fetchCast","then","resp","as","pt","API_KEY","axios","fetchTrendingMovies","data","fetchMoviesByQuery","query","fetchMovieById","movie","fetchReviews","reviews"],"sourceRoot":""}